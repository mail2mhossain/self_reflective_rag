@startuml Self Reflective RAG Pipeline

title Self Reflective RAG Technique

' Define styled node types
!define RectangleNode(x) class x << (R,#ADD1B2) >>
!define DiamondNode(x) class x << (D,#ADD1B2) >>

' Nodes
RectangleNode(identify_rag_technique)
RectangleNode(retrieve_dox)
RectangleNode(retrieve_multi_query_dox)
RectangleNode(decompose_answer)
RectangleNode(filter_relevant_documents)
RectangleNode(generate_answer)
DiamondNode(any_relevant_documents)
DiamondNode(is_document_grounded)
DiamondNode(is_answer_relevant)
END : Successful\n(End Node)
NO_ANSWER : Unsuccessful\n(End Node)

' Descriptions
identify_rag_technique : Identify RAG technique\n(Node)
retrieve_dox              : Retrieve documents (transformed query)\n(Node)
retrieve_multi_query_dox  : Retrieve documents (multiple queries)\n(Node)
decompose_answer          : Answer and consolidate sub-questions\n(Node)
filter_relevant_documents : Filter out non-relevant documents\n(Node)
generate_answer           : Generate final answer\n(Node)
any_relevant_documents    : Any relevant documents?\n(Conditional Node)
is_document_grounded      : Is answer grounded in docs?\n(Conditional Node)
is_answer_relevant        : Is answer relevant to query?\n(Conditional Node)

' Flow
identify_rag_technique --> retrieve_dox              : Query Transformation
identify_rag_technique --> retrieve_multi_query_dox  : Multi-Query Generation
identify_rag_technique --> decompose_answer          : Query Decomposition

retrieve_dox --> filter_relevant_documents
retrieve_multi_query_dox --> filter_relevant_documents

filter_relevant_documents --> any_relevant_documents
any_relevant_documents --> generate_answer : yes
any_relevant_documents --> NO_ANSWER         : no

decompose_answer --> is_document_grounded

generate_answer --> is_document_grounded

is_document_grounded --> is_answer_relevant : yes
is_document_grounded --> NO_ANSWER          : no

is_answer_relevant --> END        : yes
is_answer_relevant --> NO_ANSWER  : no

@enduml
